# –§–∞–π–ª: app.py

import streamlit as st
import time
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à–∏ –∫–ª–∞—Å—Å—ã
from cashka_preprocessor import PersonalityProcessor
from pgd_bot import PGD_Person_Mod # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ pgd_bot.py –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def perform_full_calculation(name: str, dob: datetime, gender: str) -> tuple | None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ª–∏—á–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª–∞—Å—Å–∞ PGD_Person_Mod.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ —Å —Ç—Ä–µ–º—è —Å–ª–æ–≤–∞—Ä—è–º–∏: (–æ—Å–Ω–æ–≤–Ω—ã–µ_—Ç–æ—á–∫–∏, –∑–∞–¥–∞—á–∏, –ø–µ—Ä–∏–æ–¥—ã)
    –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        # 1. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ Streamlit –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π –∫–ª–∞—Å—Å–æ–º
        date_str = dob.strftime('%d.%m.%Y')
        sex_char = '–ñ' if gender == '–ñ–µ–Ω—Å–∫–∏–π' else '–ú'

        # 2. –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
        person_mod = PGD_Person_Mod(name, date_str, sex_char)

        # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ä–∞—Å—á–µ—Ç—ã
        main_cup_data = person_mod.calculate_points()
        tasks_data = person_mod.tasks()
        periods_data = person_mod.periods_person()

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–Ω—É–ª –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç –æ—à–∏–±–∫—É
        if not isinstance(main_cup_data, dict):
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã: {main_cup_data}")
            return None
        
        # –ö–ª–∞—Å—Å PersonalityProcessor –æ–∂–∏–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–≤–∞—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
        # –ø–æ–¥ –∫–ª—é—á–æ–º, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–∞–º —Å–ª–æ–≤–∞—Ä—å.
        wrapped_cup_data = {'–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—à–∫–∞': main_cup_data}

        return wrapped_cup_data, tasks_data, periods_data

    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {e}")
        return None


def format_results_for_download(name: str, dob: datetime, results: dict, tasks: dict, periods: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è .txt —Ñ–∞–π–ª–∞."""
    header = (
    f"–ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏\n{'='*20}\n"
        f"–ò–º—è: {name}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dob.strftime('%d.%m.%Y')}\n{'='*20}\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
    tasks_content = "\n--- –ó–∞–¥–∞—á–∏ –ø–æ –ú–∞—Ç—Ä–∏—Ü–µ ---\n"
    if tasks:
        for key, value in tasks.items():
            tasks_content += f"{key}: {value if value is not None else '-'}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã
    periods_content = "\n--- –ë–∏–∑–Ω–µ—Å –ü–µ—Ä–∏–æ–¥—ã ---\n"
    if periods and "–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã" in periods:
        for key, value in periods["–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã"].items():
            periods_content += f"{key}: {value if value is not None else '-'}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    main_content = "\n--- –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ---\n"
    for key, value in results.items():
        # –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ PersonalityProcessor
        clean_value = value
        main_content += f"\n--- {key} ---\n{clean_value}\n"
    
    return header + tasks_content + periods_content + main_content


# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit ---

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –õ–∏—á–Ω–æ—Å—Ç–∏", layout="wide")
st.title("–°–µ—Ä–≤–∏—Å –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'results' not in st.session_state:
    st.session_state.results = None
    st.session_state.tasks = None
    st.session_state.periods = None
    st.session_state.processing_time = 0

# --- –ë–ª–æ–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (—É–¥–æ–±–Ω–µ–µ –≤ expander) ---
with st.expander("–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", expanded=True):
    name = st.text_input("–ò–º—è", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, –ê–Ω–∞—Å—Ç–∞—Å–∏—è")
    dob = st.date_input("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", value=None, min_value=datetime(1930, 1, 1), format="DD.MM.YYYY")
    gender = st.radio("–ü–æ–ª", ('–ñ–µ–Ω—Å–∫–∏–π', '–ú—É–∂—Å–∫–æ–π'), horizontal=True)
    
    if st.button("üöÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", use_container_width=True):
        if not name or not dob:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è: –ò–º—è –∏ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.")
        else:
            progress_bar = st.progress(0, text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–Ω–∞–ª–∏–∑—É...")
            start_time = time.monotonic()
            
            calculation_result = perform_full_calculation(name, dob, gender)
            
            if calculation_result:
                wrapped_cup_data, tasks_data, periods_data = calculation_result
                
                try:
                    processor = PersonalityProcessor(wrapped_cup_data)
                    results = processor.get_full_description()
                    
                    st.session_state.results = results
                    st.session_state.tasks = tasks_data
                    st.session_state.periods = periods_data
                    st.session_state.name = name
                    st.session_state.dob = dob
                    st.session_state.processing_time = time.monotonic() - start_time
                except Exception as e:
                    st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏–π: {e}")
                    st.session_state.results = None
            else:
                progress_bar.empty()
                st.session_state.results = None


# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if st.session_state.results:
    col1, col2 = st.columns([3, 1])
    with col1:
        st.success(f"–ê–Ω–∞–ª–∏–∑ –¥–ª—è **{st.session_state.name}** —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    with col2:
        st.metric(label="–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", value=f"{st.session_state.processing_time:.2f} —Å–µ–∫.")
    
    st.download_button(
        label="üì• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ .txt",
        data=format_results_for_download(
            st.session_state.name, st.session_state.dob,
            st.session_state.results, st.session_state.tasks, st.session_state.periods
        ).encode('utf-8'),
        file_name=f"analysis_{st.session_state.name}_{st.session_state.dob.strftime('%Y%m%d')}.txt",
        mime='text/plain'
    )
    
    st.write("---")

    # --- –ë–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç.–∫. Streamlit —Å–∞–º –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç) ---
    st.header("–°–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞—Ç—Ä–∏—Ü–µ")
    col_tasks, col_periods = st.columns(2)

    with col_tasks:
        st.subheader("–ó–∞–¥–∞—á–∏ –ø–æ –ú–∞—Ç—Ä–∏—Ü–µ")
        tasks = st.session_state.tasks
        if tasks:
            for key, value in tasks.items():
                st.markdown(f"**{key}** `{value if value is not None else '-'}`")
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–¥–∞—á–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

    with col_periods:
        st.subheader("–ë–∏–∑–Ω–µ—Å –ü–µ—Ä–∏–æ–¥—ã")
        periods = st.session_state.periods
        if periods and "–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã" in periods:
            for key, value in periods["–ë–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥—ã"].items():
                st.markdown(f"**{key}:** `{value if value is not None else '-'}`")
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –ø–æ –±–∏–∑–Ω–µ—Å –ø–µ—Ä–∏–æ–¥–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

    st.write("---")
    
    # –ë–ª–æ–∫ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
    st.header("–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Ç–æ—á–∫–∞–º")
    for key, value in st.session_state.results.items():
        with st.expander(f"**{key}**"):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º st.write –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
            st.write(value)
else:
    st.info("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")